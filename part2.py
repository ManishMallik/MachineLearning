# -*- coding: utf-8 -*-
"""part2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-0YA-wHUxkGN7VOdPoGl8uYtQBqTH9-7
"""



"""Using the libraries:

Will need data processing beforehand
"""

#2nd part: Multivariate Linear Regression using libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# if needed, split train and test
import seaborn as sns
from sklearn.metrics import r2_score
#from sklearn.datasets import load_boston
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.metrics import explained_variance_score
from sklearn.linear_model import SGDRegressor
from sklearn.preprocessing import StandardScaler
#correlation analysis
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data"
column_names = ["MPG", "Cylinders", "Displacement", "Horsepower", "Weight", "Acceleration", "Model Year", "Origin", "Car Name"]
data = pd.read_csv(url, names=column_names, delim_whitespace=True)
data = data.sample(frac=1)

"""Choosing the features (we will use 6 features: horsepower and car name not included)"""

X = data[['Cylinders', 'Displacement', 'Weight', 'Acceleration', 'Model Year', 'Origin']]
y = data['MPG']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=30)

# linear model
model = LinearRegression()

# training (this assumes X_train and y_train are training data, X_test and y_test are test data)
model.fit(X_train, y_train)

print(f"Model weight coefficients: {model.coef_}")

# predictions
y_train_pred = model.predict(X_train)

# training (evaluating)
mse = mean_squared_error(y_train, y_train_pred)

print(f"MSE Train: {mse}")

# predictions
y_test_pred = model.predict(X_test)

# testing (evaluating)
mse = mean_squared_error(y_test, y_test_pred)

print(f"MSE Test: {mse}")

#Statistics
print(f"R^2 Coefficient for Training: {r2_score(y_train, y_train_pred)}")
print(f"R^2 Coefficient for Testing: {r2_score(y_test, y_test_pred)}")
print(f"Explained Variance Score for Training: {explained_variance_score(y_train, y_train_pred)}")
print(f"Explained Variance Score for Testing: {explained_variance_score(y_test, y_test_pred)}")